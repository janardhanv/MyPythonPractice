import pandas as pd
pd.DataFrame
pd.merge
pd.pivot
pd.pivot_table

pd.unique
pd.value_counts
pd.isna()
pd.isnull()
pd.Categorical()
pd.CategoricalDtype()
pd.CategoricalIndex()
pd.Grouper()
pd.HDFStore()
pd.concat()
pd.crosstab()
pd.merge_ordered()
pd.testing.assert_frame_equal()

pd.read_csv
pd.read_excel
pd.read_json
pd.read_pickle
pd.read_sql_query
pd.read_sql

pd.DataFrame().to_csv()
pd.DataFrame().to_json()
pd.DataFrame().to_parquet()
pd.DataFrame().to_pickle()
pd.DataFrame().to_sql()

pd.DataFrame().take()
pd.DataFrame().agg()
pd.DataFrame().aggregate()
pd.DataFrame().apply()
pd.DataFrame().asof()
pd.DataFrame().corr()
pd.DataFrame().corrwith()
pd.DataFrame().count()
pd.DataFrame().diff()
pd.DataFrame().drop()
pd.DataFrame().drop_duplicates()
pd.DataFrame().dropna()
pd.DataFrame().droplevel()
pd.DataFrame().explode()
pd.DataFrame().fillna()
pd.DataFrame().filter()
pd.DataFrame().first()
pd.DataFrame().head()
pd.DataFrame().get_dtype_counts()
pd.DataFrame().get_ftype_counts()
pd.DataFrame().get_values()
pd.DataFrame().groupby()
pd.DataFrame().iteritems
pd.DataFrame().iterrows
pd.DataFrame().lookup()
pd.DataFrame().notna()
pd.DataFrame().nunique()
pd.DataFrame().query()
pd.DataFrame().rank()
pd.DataFrame().rename()
pd.DataFrame().replace()
pd.DataFrame().resample()
pd.DataFrame().reset_index()
pd.DataFrame().sample()
pd.DataFrame().select_dtypes()
pd.DataFrame().shape()
pd.DataFrame().sort_values()
pd.DataFrame().stack()
pd.DataFrame().where()
pd.DataFrame().unstack()
pd.DataFrame().update()
pd.DataFrame().values()

import json
json.dump()
json.dumps()
json.load()
json.loads()


import requests as re
re.Request
re.get
re.post
re.put
re.session()
re.HTTPError.response
re.Response

import flask 
import flask.app 
import flask.blueprints
import flask.json
import flask.sessions
import flask.debughelpers
import flask.logging
import flask.testing
import flask.wrappers
import flask.config
import flask_sqlalchemy
flask_sqlalchemy.Model
flask_sqlalchemy.SQLAlchemy
flask_sqlalchemy.BaseQuery
import flask.views
import flask_user

import sqlalchemy
sqlalchemy.create_engine
engine=sqlalchemy.create_engine("postgresql://scott:tiger@localhost/test")
engine.BaseQuery
sqlalchemy.engine_from_config()


import numpy
import matplotlib

import matplotlib
import matplotlib.pyplot as plt
plt.plot()#start viz 
plt.axes()#add parameters to viz
plt.show()#show viz
plt.title
plt.xlabel
plt.xscale
plt.ylabel
plt.yscale
plt.ylim#y limit 

plt.bar()
plt.box()
plt.boxplot()
plt.grid()
plt.hist()
plt.imshow()
plt.pie()
plt.scatter()

plt.figure() #draw new fig
plt.savefig()
plt.draw() #update figure
plt.clf #(clear current figure)
plt.close()
import numpy as np
import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4])
plt.ylabel('some numbers')
plt.show()

plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
plt.axis([0, 6, 0, 20])
plt.show()

data = {'a': np.arange(50),
        'c': np.random.randint(0, 50, 50),
        'd': np.random.randn(50)}
data['b'] = data['a'] + 10 * np.random.randn(50)
data['d'] = np.abs(data['d']) * 100
plt.scatter('a', 'b', c='c', s='d', data=data)
plt.xlabel('entry a')
plt.ylabel('entry b')
plt.show()

t = np.arange(0., 5., 0.2)

# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()

#Plotting with categorical variables
names = ['group_a', 'group_b', 'group_c']
values = [1, 10, 100]

plt.figure(figsize=(9, 3))

plt.subplot(131)
plt.bar(names, values)
plt.subplot(132)


tensor flow 

import tensorflow_core.contrib.boosted_trees.estimator_batch
import tensorflow_core.contrib.bayesflow
import tensorflow_core.contrib.batching
import tensorflow_core.contrib.cluster_resolver
import tensorflow_core.contrib.cmake
import tensorflow_core.contrib.cudnn_rnn
import tensorflow_core.contrib.data
import tensorflow_core.contrib.compiler
import tensorflow_core.contrib.decision_trees
import tensorflow_core.contrib.distributions
import tensorflow_core.contrib.estimator
import tensorflow_core.contrib.libsvm
import tensorflow_core.contrib.eager.python.examples.revnet.revnet
import tensorflow_core.contrib.framework
import tensorflow_core.contrib.grid_rnn
import tensorflow_core.contrib.image
import tensorflow_core.contrib.input_pipeline.ops
import tensorflow_core.contrib.integrate
import tensorflow_core.contrib.keras.api.keras
import tensorflow_core.contrib.keras.api.keras.activations
import tensorflow_core.contrib.keras.api.keras.applications
import tensorflow_core.contrib.keras.api.keras.backend
import tensorflow_core.contrib.keras.api.keras.layers
import tensorflow_core.contrib.keras.api.keras.losses
import tensorflow_core.contrib.keras.api.keras.metrics
import tensorflow_core.contrib.keras.api.keras.models
import tensorflow_core.contrib.keras.api.keras.optimizers
import tensorflow_core.contrib.keras.api.keras.preprocessing
import tensorflow_core.contrib.keras.api.keras.regularizers
import tensorflow_core.contrib.keras.api.keras.utils
import tensorflow_core.contrib.keras.api.keras.wrappers
import tensorflow_core.contrib.kernel_methods
import tensorflow_core.contrib.labeled_tensor
import tensorflow_core.contrib.layers
import tensorflow_core.contrib.learn
import tensorflow_core.contrib.learn.python.learn.estimators
import tensorflow_core.contrib.learn.python.learn.basic_session_run_hooks
import tensorflow_core.contrib.linear_optimizer
import tensorflow_core.contrib.libsvm.ops.gen_libsvm_ops
import tensorflow_core.contrib.losses
import tensorflow_core.contrib.losses.python.metric_learning
import tensorflow_core.contrib.memory_stats
import tensorflow_core.contrib.metrics
import tensorflow_core.contrib.mixed_precision
import tensorflow_core.contrib.model_pruning
import tensorflow_core.contrib.nearest_neighbor
import tensorflow_core.contrib.nn
import tensorflow_core.contrib.opt
import tensorflow_core.contrib.optimizer_v2
import tensorflow_core.contrib.optimizer_v2.adagrad
import tensorflow_core.contrib.optimizer_v2.adam
import tensorflow_core.contrib.optimizer_v2.gradient_descent
import tensorflow_core.contrib.optimizer_v2.momentum
import tensorflow_core.contrib.optimizer_v2.adadelta
import tensorflow_core.contrib.predictor
import tensorflow_core.contrib.rate
import tensorflow_core.contrib.recurrent
import tensorflow_core.contrib.resampler
import tensorflow_core.contrib.rnn
import tensorflow_core.contrib.rnn.python.tools
import tensorflow_core.contrib.saved_model
import tensorflow_core.contrib.seq2seq
import tensorflow_core.contrib.seq2seq.python.ops.attention_wrapper
import tensorflow_core.contrib.solvers
import tensorflow_core.contrib.sparsemax
import tensorflow_core.contrib.tensor_forest
import tensorflow_core.contrib.tensor_forest.hybrid
import tensorflow_core.contrib.text
import tensorflow_core.contrib.text.python.ops.skip_gram_ops
import tensorflow_core.contrib.timeseries.examples.lstm
import tensorflow_core.contrib.timeseries.examples.multivariate
import tensorflow_core.contrib.timeseries.examples.known_anomaly
import tensorflow_core.contrib.tpu
import tensorflow_core.contrib.training
import tensorflow_core.core.example
import tensorflow_core.core.framework
import tensorflow_core.core.grappler.costs
import tensorflow_core.core.kernels.boosted_trees
import tensorflow_core.examples
import tensorflow_core.lite.experimental.examples.lstm
import tensorflow_core.lite.experimental.tensorboard
import tensorflow_core.python.autograph
import tensorflow_core.python.estimator
import tensorflow_core.python.debug
import tensorflow_core.python.distribute
import tensorflow_core.python.distribute.saved_model_test_base
import tensorflow_core.python.estimator
import tensorflow_core.python.keras.api._v1.keras
import tensorflow_core.python.keras.api.keras
import tensorflow_core.python.keras.api.keras.activations
import tensorflow_core.python.keras.api.keras.applications
import tensorflow_core.python.keras.api.keras.backend
import tensorflow_core.python.keras.api.keras.layers
import tensorflow_core.python.keras.api.keras.losses
import tensorflow_core.python.keras.api.keras.metrics
import tensorflow_core.python.keras.api.keras.models
import tensorflow_core.python.keras.api.keras.optimizers
import tensorflow_core.python.keras.api.keras.preprocessing
import tensorflow_core.python.keras.api.keras.regularizers
import tensorflow_core.python.keras.applications.densenet
import tensorflow_core.python.keras.applications.imagenet_utils
import tensorflow_core._api.v1.audio
import tensorflow_core.contrib.keras.api.keras.datasets
import tensorflow_core.contrib.kernel_methods
import tensorflow_core.contrib.layers
import tensorflow_core.contrib.learn
import tensorflow_core.contrib.learn.python.learn.estimators
import tensorflow_core.contrib.learn.python.learn.preprocessing
import tensorflow_core.python.debug.lib
import tensorflow_core.python.debug.lib.profiling
import tensorflow_core.python.distribute.estimator_training
import tensorflow_core.python.estimator
import tensorflow_core.python.estimator.keras
import tensorflow_core.python.keras.datasets
plt.scatter(names, values)
plt.subplot(133)
plt.plot(names, values)
plt.suptitle('Categorical Plotting')
plt.show()


https://realpython.com/python-matplotlib-guide/
seaborn is an extension of Matplotlib with advanced features.
https://www.c-sharpcorner.com/article/a-complete-python-seaborn-tutorial/

